/*Результатом должна быть консольная программа с текстовым меню. Программа
должна содержать шаблонный класс для управления данными согласно заданию.
Для хранения данных необходимо выбрать оптимальный с точки зрения задания
контейнер.*/

/*
1. Предусмотреть операции добавления, изменения и удаления элемента
контейнера.
2. Реализовать ввод и вывод элементов контейнера с использованием потоковых
итераторов на экран и в файл.
3. Реализовать операции поиска по заданным критериям и выборки подмножества
элементов по заданным критериям. Реализовать поиск в двух вариантах: линейный
поиск и двоичный поиск на отсортированном контейнере.
4. Предусмотреть вывод подмножества выборки на экран и в файл.
*/

/*Структура записи о коммунальном платеже содержит поля: адрес квартиры,
фамилия владельца, вид платежа, дата платежа, сумма платежа, процент пени,
количество дней просрочки платежа. Поиск по номеру дома, квартиры, владельцу,
дате, наличии долга. Вывод суммы долга в результатах поиска.*/

/* ДОПОЛНЕНИЕ ДЛЯ ТРЕТЬЕЙ ЗАДАЧИ:
 * Реализовать справочник управляющей компании.
 *
 * Да, это абсолютное великолепное условие для задачи
 * Получается:
 * 1. Укрепляю работоспособность и обработку ошибок ввода (запрещаю падать программочке)
 * 2. Сохраняю состояние в служебном файле
 * 3. Переиспользую больше кода
 *
 * Ну и мне хотелось инкапсулировать максимум логики в самом даталисте,
 * чтобы он был типо как готова компонента (энивей вся логика из него выносится за пару минут,
 * и в main.cpp снова становится миллион функций, а DataList становится стройный хз как лучше
 *
 * Дополнительная логика типо возможности разделения функционала в зависимости от выбранной роли
 * тоже быстро докидывается, если это понадобится
*/



#include <iostream>
#include "DataList.h"

int main() {
    setlocale(LC_ALL, "Rus");
    DataList<CommunalPayment> data_list;
    data_list.main_menu();
    return 0;
}